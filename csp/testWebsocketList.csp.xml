<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="testWebsocketList.csp" application="/csp/vkfb/" default="1"><![CDATA[
<html>
<head>
  <!-- link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" -->
  <link rel="stylesheet" href="lib/bootstrap/css/bootstrap.min.css">
  <!-- link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-modal/2.2.6/css/bootstrap-modal.min.css" -->
  <link rel="stylesheet" href="lib/bootstrap-modal.min.css">
  <!-- <link rel="stylesheet" href="lib/twitter-css/embed-tweet.css" /> -->

  <!-- link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap-theme.min.css" -->
  <link rel="stylesheet" href="lib/bootstrap-theme.min.css">


  <!-- script src="https://code.jquery.com/jquery-1.11.2.min.js"></script -->
  <script src="lib/jquery-1.11.2.min.js"></script>
  <!-- script src="https://code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script -->
  <script src="lib/jquery-ui.min.js"></script>
  <!-- script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script -->
  <script src="lib/bootstrap/js/bootstrap.min.js"></script>
  <!-- script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-modal/2.2.6/js/bootstrap-modal.min.js"></script -->
  <script src="lib/bootstrap-modal.min.js"></script>

  <!-- script src='http://cdn.ractivejs.org/latest/ractive.min.js'></script -->
  <script src='lib/ractive.min.js'></script>
  <style type="text/css">
  .tweets-container {
      height: 100vh;
      display: flex;
      flex-direction: column;
      overflow-y: hidden;
  }
  .list-unstyled {
      overflow-y: hidden;
  }
  .flex-module-inner {
    flex-grow: 1;    
  }
  .fadeout {
    position: relative; 
    bottom: 4em;
    height: 3em;
    background: -webkit-linear-gradient(
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 1) 100%
    ); 
    background-image: -moz-linear-gradient(
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 1) 100%
    );
    background-image: -o-linear-gradient(
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 1) 100%
    );
    background-image: linear-gradient(
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 1) 100%
    );
    background-image: -ms-linear-gradient(
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 1) 100%
    );
  }
  /* sentiment visualization */
kbd.sentiment-neg5 {
    background-color: #F8696B !important;
}
kbd.sentiment-neg4 {
    background-color: #F9826F !important;
}
kbd.sentiment-neg3 {
    background-color: #FA9D75 !important;
}
kbd.sentiment-neg2 {
    background-color: #FCB77A !important;
}
kbd.sentiment-neg1 {
    background-color: #FDD17F !important;
}
kbd.sentiment-neutral {
    /* border-left: 4px solid #FFEB84 ; */
    /* background-color: #e1e8ed !important; */
}
kbd.sentiment-pos1 {
    background-color: #E0E383 !important;
}
kbd.sentiment-pos2 {
    background-color: #C1DA81 !important;
}
kbd.sentiment-pos3 {
    background-color: #A2D07F !important;
}
kbd.sentiment-pos4 {
    background-color: #83C77D !important;
}
kbd.sentiment-pos5 {
    background-color: #63BE7B !important;
}
  </style>

<script id='tweets-template' type='text/ractive'>
    <div class="flex-module-inner">
        <ul class="list-unstyled">
        {{#tweets }}
            <li class="trend-item js-trend-item  ">
            <kbd class='{{ getSentimentStyle(score) }}' >{{user}}</kbd> &nbsp; {{text}}
            </li>
        {{/tweets}}
        </ul>
        <div class="fadeout"></div>
    </div>
</script>

<script language="JavaScript" type="text/javascript">
var ws;
var wsserver = "#($system.CSP.GetDefaultApp($namespace))#/TWReader.WebSocket.Test.cls"
var tweets = [];
var uniqueTweets = {};
var tweetsSlice = [];
var vlist;
var maxN = 30;

var sentimentStyles = {
        "-5": "sentiment-neg5",
        "-4": "sentiment-neg4",
        "-3": "sentiment-neg3",
        "-2": "sentiment-neg2",
        "-1": "sentiment-neg1",
        "0": "sentiment-neutral",
        "1": "sentiment-pos1",
        "2": "sentiment-pos2",
        "3": "sentiment-pos3",
        "4": "sentiment-pos4",
        "5": "sentiment-pos5"
    };

function getSentimentStyle(score) {
    score = Math.round(score);
    score = score > 5 ? 5 : (score < -5 ? -5 : score);
    return sentimentStyles[score];
}

if ((typeof(WebSocket) == 'undefined') && (typeof(MozWebSocket) != 'undefined')) {
    WebSocket = MozWebSocket;
}

function init() {
    connect();
    $('#btn-connect').on('click', function() {
        if (!ws) {
            connect();
        } else {
            getmoretweets();
        }
    });
    
    $('#btn-disconnect').on('click', function() {
        disconnect();
    });
    
    $('#btn-dettach').on('click', function() {
        // detach(); // FIXME - TODO
    });
}

function connect() {
    if (ws) {
        return;
    }
    tweets = [];
    ws = new WebSocket(((window.location.protocol == "https:") ? "wss:" : "ws:") + "//" + window.location.host + wsserver);

    ws.onopen = function(event) {
        //$("#connected").html("Connected to WebSocket server: <b>" + decodeURIComponent(wsserver) + "</b>");
        console.log("Connected to WebSocket server: <b>" + decodeURIComponent(wsserver) + "</b>");
        gettweets();
    };

    ws.onmessage = function(event) {
        //$("#output").html("<b>" + event.data + "</b>");
        console.log("<b>" + event.data + "</b>");
    };

    ws.onerror = function(event) {
        //$("#connected").html("Connection Error - Check that the web server supports web sockets");
        alert("Connection Error - Check that the web server supports web sockets");
    };

    ws.onclose = function(event) {
        ws = null;
        //$("#connected").html("Connection Closed");
        console.log("Connection Closed");
    }
}

function send(command, message) {
    if (ws) {
        var op = { cmd: command, val: message };
        ws.send(JSON.stringify(op));
    }

}

function updateWholeRactive(tweets, maxN) {
    tweetsSlice = tweets.slice(0, maxN - 1)
    ractiveTweets.set('tweets', tweetsSlice);
}

function updateSingleRactive(tweet) {
    var id = tweet.id;
    if (uniqueTweets.hasOwnProperty(id)) {
        console.log('Duplicated tweet id:' + id + ', text:' + tweet.text);
        return;
    }
    if (tweetsSlice.length >= maxN) {
        tweetsSlice.pop();
    }
    uniqueTweets[id] = 1;
    tweetsSlice.unshift(tweet);
    ractiveTweets.set('tweets', tweetsSlice);
}

function isPlainData(json) {
    return (json.data !== undefined);
}
function handleSimpleCommands(data) {
    //console.log('simple command: ' + data);
    if (/\bEOL\b/.test(data)) {
        console.log('end of tweets chunk: ' + tweets.length);
        window.setTimeout(function() {
            getmoretweets();
        }, 500);
    }
}
function gettweets() {
    if (ws) {
        ws.onmessage = function(event) {
            var obj = JSON.parse(event.data);
            //tweets.push(obj);
            if (!isPlainData(obj)) {
                tweets.unshift(obj);
                updateWholeRactive(tweets, maxN);
            } else {
                handleSimpleCommands(obj.data);
            }
        };
        console.log('initiated tweetsall message');
        send('tweetsall', '');
    }
}
function getmoretweets() {
    if (ws) {
        ws.onmessage = function(event) {
            var obj = JSON.parse(event.data);
            //tweets.push(obj);
            if (!isPlainData(obj)) {
                tweets.unshift(obj);
                updateSingleRactive(obj);
            } else {
                handleSimpleCommands(obj.data);
            }
        };
        send('tweets', '');
    }
}
//window.getmoretweets = getmoretweets;

function disconnect() {
    if (ws) {
        send('exit','');
        ws.close();
    }
}

</script>

</head>

<body onload="init();">

<div class="container">
    <div class="page-header">
        <h2>Cach&eacute; Processed Twitter Stream Demo</h2>
        <div class="btn-group btn-group-xs" role="group" aria-label="...">
            <button type="button" id="btn-connect"    class="btn btn-success"><span class="glyphicon glyphicon-play"></span>&nbsp;Connect</button>
            <button type="button" id="btn-detach"     class="btn btn-warning"><span class="glyphicon glyphicon-pause"></span>&nbsp;Detach</button>
            <button type="button" id="btn-disconnect" class="btn btn-danger"><span  class="glyphicon glyphicon-stop"></span>&nbsp;Disconnect</button>
        </div>
    </div>
    
    <div id="tweets-container"></div>

</div>

</body>

<script>
var ractiveTweets = new Ractive({
    el: '#tweets-container',
    template: '#tweets-template',
    data: {
        tweets: tweets,
        getSentimentStyle: getSentimentStyle
    },
});
  
</script>
</html>
]]></CSP>
</Export>
