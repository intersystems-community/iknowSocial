<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="custom.js" application="/csp/iknowsocial/" default="1"><![CDATA[
var posts = {}
  	
function postCallback(){
}

headers = {
	"sourceId" : "SourceId",
	"title" : "Title",
	"date" : "Date",
	"time" : "Time",
	"city" : "City",
	"country" : "Country",
	"bdate" : "DOB",
	"sex" : "Sex", 
	"id" : "Link",
	"EC": "EC",
	"latitude": "Lat",
	"longitude": "Long"
}

function drawTableHeader(tableId, meta) {
	$(tableId + "-header thead tr").html("")
	for (var i = 0; i < meta.length; i++) {
		$(tableId + "-header thead tr").append($("<th><div>" + headers[meta[i]] + "</div></th>"));
	}
}

function wrap(contents, tag) {
	return "<" + tag + ">" + contents + "</" + tag + ">";
}

function drawTableRow(tableId, rowObject, meta) {
	$(wrap(rowObject.sourceId, "a")).addClass("link-to-full-source").attr({
		"data-toggle": "modal",
		"data-target": "#show-source-id-modal"
	}).appendTo(tableId + " tbody").wrap('<tr scope="row"><th></th></tr>');
	for (var i = 1; i < meta.length; i++) {
		$(tableId + " tbody tr").last().append($("<td><div>" + rowObject[meta[i]] + "</div></td>"));
	}
}

function drawTable(tableId, tableObject, meta) {
	$(tableId + " tbody").html("")
	meta = typeof meta !== 'undefined' ? meta : ["title", "date", "time", "city", "country", "bdate", "sex", "id", "EC"]
	meta.unshift("sourceId");
	drawTableHeader(tableId, meta);
	for (var i = 0; i < tableObject.length; i++) {
		drawTableRow(tableId, tableObject[i], meta);
	}
}
	
  function toggleTableRow(tableId, row) {
    var tableRows = $(tableId + " tr");
    row.toggleClass("highlighted-row");
    $(tableId + "-main-button").prop("disabled", tableRows.filter(".highlighted-row").length < 1);
  };

  function unhighlightTableRow(tableId, row) {
    var tableRows = $(tableId + " tr");
    row.removeClass("highlighted-row");
    $(tableId + "-main-button").prop("disabled", tableRows.filter(".highlighted-row").length < 1);
  }

  function toggleWholeTable(tableId) {
    var tableRows = $(tableId + " tr");
    tableRows.each(function() {
      toggleTableRow(tableId, $(this));
    });
  };

  function unhighlightWholeTable(tableId) {
    var tableRows = $(tableId + " tr");
    tableRows.each(function() {
      unhighlightTableRow(tableId, $(this));
    });
  }

  function setTableToggling(tableId) {
    console.log(tableId);
    var tableRows = $(tableId + " tr");
    tableRows.off("click");
    tableRows.click(function() {
      toggleTableRow(tableId, $(this));
    });
  };

  function setSearch(tableId) {
    $(tableId + '-search-pane').keyup(function() {
      var text = $(this).val();
      $(tableId + ' tr td:nth-child(2)').each(function() {
        var elem = $(this);
        if (elem.text().indexOf(text) > -1) {
          elem.parent().css({
            "display":"table-row"
          });
        } else {
          elem.parent().css({
            "display":"none"
          });
        }
      });
    });
  }

function componentToHex(c) {
    var hex = c.toString(16);
    return hex.length == 1 ? "0" + hex : hex;
}

function rgbToHex(r, g, b) {
    return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

//http://stackoverflow.com/questions/4161369/html-color-codes-red-to-yellow-to-green
function generateGYRGradient() {
	var result = [];
	var red = 255; //i.e. FF
	var green = 0;
	var stepSize = 5; //how many colors do you want?
	while(green < 255) {
    	green += stepSize;
    	if(green > 255) {
	    	green = 255;
		}
		output(red, green); //assume output is function that takes RGB
	}
	while(red > 0) {
    	red -= stepSize;
    	if(red < 0) {
	    	red = 0;
	    }
    	output(red, green); //assume output is function that takes RGB
	}
	
	function output(red, green) {
		result.push(rgbToHex(red, green, 0));
	}
	
	return result;
}]]></CSP>
</Export>
