<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Misc.EmotionalMarker">
<IncludeCode>%IKPublic</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>63579,66295.439709</TimeCreated>

<Property name="Entity">
<Type>%String</Type>
</Property>

<Property name="Weight">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>entity:%String,weight:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..Entity = entity
	set ..Weight = weight
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ProcessFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set stream = ##class(%Stream.FileCharacter).%New()
	set sc = stream.LinkToFile(filename)
	quit:$$$ISERR(sc) sc
	
	set i = 0
	while 'stream.AtEnd {		
		set line = stream.ReadLine()
		
		if ($extract(line, 1) = "!") {
			continue
		}
		
		set weight = $piece(line, "#", 1)
		set i = i + 1
		
		set words = $listfromstring($piece(line, "#", 2), ",")
		set j = 1
		while ($listdata(words, j) '= 0) {
			
			set entity = $list(words, j)
			//w entity, weight, !
			set marker = ##class(Misc.EmotionalMarker).%New(entity, weight)
			set status = marker.%Save()
			if ($$$ISOK(status)) {
				w "Successfully added", !
			}
			
			set j = j + 1
		}
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ProvideEnclosingDictionaryForMarkerWithinDomain">
<ClassMethod>1</ClassMethod>
<FormalSpec>entity:%String,weight:%String,domainId:%String</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	kill similarResult
	do ##class(%iKnow.Queries.EntityAPI).GetSimilar(.similarResult, domainId, entity, 1, 0, , ,$$$USEWORDS)
			
	set arr = ##class(%ArrayOfDataTypes).%New()
	if '($data(similarResult(1))) { 
		quit arr
	}
				
	set j = 1
	while $data(similarResult(j)) {
				
		set similarEntityId = $list(similarResult(j), 1)
		set similarEntity = ##class(%iKnow.Queries.EntityAPI).GetValue(domainId, similarEntityId)
				
		if (similarEntity '= entity) {
			do arr.SetAt(weight, similarEntity)
		}
		set j = j + 1
	}
	zw arr
	quit arr
]]></Implementation>
</Method>

<Method name="ProvideEnclosingDictionaryWithinDomain">
<ClassMethod>1</ClassMethod>
<FormalSpec>domainId:%String</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set query = "select distinct * from Misc.EmotionalMarker"
	set statement = ##class(%SQL.Statement).%New()
	set status = statement.%Prepare(query)
	quit:$$$ISERR(status) status
	set result = statement.%Execute()
	set arr = ##class(%ArrayOfDataTypes).%New()
	while result.%Next() {
		set weight = result.Weight
		set entity = result.Entity
		set markerClosureArray = ##class(Misc.EmotionalMarker).ProvideEnclosingDictionaryForMarkerWithinDomain(entity, weight, domainId)
		set status = ##class(Util.Misc).AddArrayToArray(markerClosureArray, arr)
		if ($$$ISOK(status)) {
			w "{" _ entity _ "," _ weight _ "} enclosure was succesfully added to result", ! 
		} else {
			w "Something went wrong", !
		}
	}
	quit arr
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Misc.EmotionalMarkerD</DataLocation>
<DefaultData>EmotionalMarkerDefaultData</DefaultData>
<IdLocation>^Misc.EmotionalMarkerD</IdLocation>
<IndexLocation>^Misc.EmotionalMarkerI</IndexLocation>
<StreamLocation>^Misc.EmotionalMarkerS</StreamLocation>
<Data name="EmotionalMarkerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Entity</Value>
</Value>
<Value name="3">
<Value>Weight</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
