<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Util.Requests.RequestSender">
<Description>
This class provides ability to send https-requests and process their responses conveniently.</Description>
<Super>%RegisteredObject,Util.AuditHelper,Util.Http.IChunkCallback</Super>
<TimeCreated>63524,64364.95359</TimeCreated>

<Parameter name="SSLConfigurationName">
<Description>
Holds name of SSL configuration to use with https-request (set it to the one from your management portal).</Description>
<Default>VKAPI</Default>
</Parameter>

<Parameter name="RequestTest">
<Description><![CDATA[
0 => request made, no request printout.
1 => request printout, no request. 
2 => request printout and request made.
3 => request made, no printout at all.]]></Description>
<Default>0</Default>
</Parameter>

<Method name="%OnHttpReceive">
<FormalSpec>Data:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim status As %Status = $$$OK
    set oldIO = $IO use 0
    #dim proxyObject As %ZEN.proxyObject
    set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Data, ,.proxyObject)
    goto:$$$ISERR(status) close
    
    // write indented (in a readable form) to the screen
    do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(proxyObject)
close
    use oldIO
    return $$$OK
]]></Implementation>
</Method>

<Method name="Write">
<FormalSpec>data:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#if 0
    // FIXE - uncomment when inherit from %Stream.TmpCharacter
    do ..%OnHttpReceive(data)
    quit ##super(data)
#endif
]]></Implementation>
</Method>

<Method name="SendHttpRequest">
<Description>
Sends 'GET https://server/location?parametersString' request. Response is saved into responseText.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[server:%String="api.vk.com",location:%String,parameters:%ArrayOfDataTypes,&responseText:%String(MAXLEN=1000000),requestType:%Integer="",authorization:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (requestType = "") {
        set requestType = ..#RequestTest
    }
    // #dim req as %Net.HttpRequest = ##class(%Net.HttpRequest).%New()
    #dim req as Util.Http.StreamingRequest = ##class(Util.Http.StreamingRequest).%New()
    set req.Server = server
    set req.Https = 1
    set req.SSLConfiguration = ..#SSLConfigurationName
    if (authorization '= "") {
        set req.Authorization = authorization
    }
    
    #dim k as %String = ""
    #dim v as %String = ""
    
    #dim status as %Status = $$$OK
    #dim queryParams As %String = ##class(Util.Requests.RequestMaker).RequestArrayToQueryString(location, parameters)
    if (requestType >= 2) {
        write "server: ", server, !
        write "ssl configuration: ", ..#SSLConfigurationName, !
        write "authorization: ", authorization, !
        write "parameters:",!
        #dim key as %String = ""
        while (1) {
            #dim value as %String = parameters.GetNext(.key)
            quit:key=""  
            write ?4, key, " = ", value, !
        }

        write "query params encoded: ", queryParams, !
    }

    do ..AuditNetworkRequest(1, server, queryParams)
    //do ..AuditLog("AuthorizationData", $get(authorization))
    
    set callback = ..%New()
#if 0
    // FIXME - still is being buffered till the end
    set callback.%Location = $name(^||Util.Requests.Global)
    set callback.RemoveOnClose = $$$OK
    set req.ResponseStream = callback
    set status = req.Get(queryParams, requestType # 3)
#else
    set req.AcceptGzip = 0 ; BUGBUG: otherwise we have uncompressed data only at the end of http request
    set status = req.Get(queryParams, requestType # 3,,callback)
#endif
   
    
    if ($$$ISOK(status)) {
        #dim response as %String = ""
        if (requestType '= 1) {
            #dim res as %Net.HttpResponse = req.HttpResponse
            
            if (($data(res)) &&  (requestType '= 3)) {
                write "Response: ", res.StatusCode, ", ", res.StatusLine, ", ", res.ReasonPhrase, !
            }
            if ($$$ISOK(status)) {
                #dim responseLength as %Integer = 1000000
                set response = res.Data.Read(.responseLength)
                if (requestType '= 3) {
                    write "Response type: ", $classname(res.Data), !
                    write "Response length: ", $length(response), ", ", responseLength, !
                }
            }
        }
        set responseText = response
        do ..AuditLog("TwitterResponse", $get(responseText))
    } else {
        set responseText = ""
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="SendSimpleHttpRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[server:%String="api.vk.com",location:%String,&responseText:%String(MAXLEN=1000000)]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim req as %Net.HttpRequest = ##class(%Net.HttpRequest).%New()
    set req.Server = server
    
    #dim k as %String = ""
    #dim v as %String = ""
    
    #dim status as %Status = $$$OK
    set status = req.Get(location)

    if ($$$ISOK(status)) {
        #dim response as %String = ""
        #dim res as %Net.HttpResponse = req.HttpResponse
            
        #dim responseLength as %Integer = 1000000
        set response = res.Data.Read(.responseLength)
        
        set responseText = response
    } else {
        set responseText = ""
    }
        
    quit status
]]></Implementation>
</Method>

<Method name="GetJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>server:%String="api.vk.com",location:%String</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
    #dim responseText As %String
    set status = ..SendSimpleHttpRequest(server, location, .responseData)
    quit:$$$ISERR(status) ""
    
    set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
    quit:$$$ISERR(status) "" 
    quit response
]]></Implementation>
</Method>
</Class>
</Export>
