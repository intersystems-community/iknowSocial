<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="map.CSP" application="/csp/iknowsocial/" default="1"><![CDATA[
<html>
<head>
  <title>Map Colorer</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
  <link rel="stylesheet" href="custom.css">
  <script src="http://code.jquery.com/jquery-1.11.2.min.js"></script>
  <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
  <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
  <script src="custom.js"></script>
  <script src="geo.js"></script>
  <script language="JavaScript">
  	var emotionalCircles = L.layerGroup([]);
  	
  	function anchorOnclick(anchor) {
        console.log(anchor);
	  	$(anchor)[0].scrollIntoView();
        higlightAndFadeTableRow(anchor);
    }
  	
  	function bindGeoPostMarker(rowObj, map) {
	  	var anchor = '#' + 'map-table-row-' + rowObj.sourceId;
    	var marker = L.marker(rowObj.toTuple()).addTo(map);
    	marker.on('click', function() {
    		anchorOnclick(anchor);
    	});
  	}
  	
  	function drawEmotionalCircles(circlesGroup, posts, map) {
	  	boxCities = GeoPoint.getGeonamesCities(map, function(cities) {
		  	circlesGroup.clearLayers();
    		var clusters = GeoPoint.clusterize(posts, cities);
    		var ECDistanceUnit = GeoPost.getECDistanceUnit(posts, cities);
    		var gradient = generateGYRGradient();
    		var relations = GeoPost.getECRelations(clusters);
    		for (var key in cities) {
	    		var radius = GeoPost.getTotalAbsoluteEC(clusters[key]) * ECDistanceUnit;
    			circlesGroup.addLayer(L.circle(cities[key].toTuple(), radius, {
    				color : gradient[Math.max(Math.floor(relations[key] * gradient.length) - 1, 0)]
    			}));
    		}
    		circlesGroup.addTo(map);
    	});
  	}
  	
  	$(document).ready(function() {
	  	var map = L.map('map', {
      		center: [49, 32],
      		zoom: 5
    	});
    	
    	postCallback = function() {
  			posts = GeoPost.getFromPosts(posts);
  			console.log(posts);
    		for (var key in posts) {
	    		bindGeoPostMarker(posts[key], map);
    		}
    		drawEmotionalCircles(emotionalCircles, posts, map);
  		}
    	
    	L.tileLayer('http://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
    	//L.tileLayer('http://c.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg', {
    	//L.tileLayer('http://a.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
    	//L.tileLayer('http://otile1.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png', {
      		attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> and <a href="http://geonames.org/">GeoNames</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
      		maxZoom: 18
    	}).addTo(map);
    	map.on('zoomend', function() {
    		drawEmotionalCircles(emotionalCircles, posts, map);
    	});
	});
  </script>
</head>
<body>
  <nav class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
      <div class="navbar-header">
        <a class="navbar-brand" href="#">Map Colorer</a>
      </div>
      <div class="collapse navbar-collapse">
      </div>
    </div>
  </nav>
  <div class="container">
    <div class="row">
      <div class="col-md-10 col-md-offset-1">
        
      </div>
    </div>
    <div class="row" style="margin-top:10px">
      <div class="col-md-6">
      	<div class="panel panel-default">
        	<div id="map"></div>
        </div>
      </div>
      <div class="col-md-6">
      	<div class="panel panel-default">
          <table class="table" id="map-table-header">
              <thead>
                <tr>
                  <th>SourceId</th>
                  <th>Title</th>
                  <th>Lat</th>
                  <th>Long</th>
                </tr>
              </thead>
          </table>
          <div class="table-content big-content-wrapper">
            <table class="table" id="map-table">
              <tbody>
              	 <script language="JavaScript">
              	 	#call(TWReader.UIBroker.DrawTable("", "['title', 'latitude', 'longitude', 'EC']", "#map-table"))#
               </script>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>


</body>
</html>
]]></CSP>
</Export>
