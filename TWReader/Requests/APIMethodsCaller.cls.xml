<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="TWReader.Requests.APIMethodsCaller">
<Super>%RegisteredObject</Super>
<TimeCreated>63619,75001.090612</TimeCreated>

<Parameter name="MaxEntityQueryCount">
<Type>%Integer</Type>
<Default>100</Default>
</Parameter>

<Parameter name="BaseSSLURL">
<Default>https://api.twitter.com</Default>
</Parameter>

<Parameter name="SslTlsConfig">
<Default>Twitter</Default>
</Parameter>

<Parameter name="ApiServer">
<Default>api.twitter.com</Default>
</Parameter>

<Parameter name="ApiUserTimelineUrl">
<Default>1.1/statuses/user_timeline.json</Default>
</Parameter>

<Parameter name="ApiSearchUrl">
<Default>1.1/search/tweets.json</Default>
</Parameter>

<Parameter name="ApiTrendsClosestUrl">
<Default>1.1/trends/closest.json</Default>
</Parameter>

<Parameter name="ApiTrendsPlaceUrl">
<Default>1.1/trends/place.json</Default>
</Parameter>

<Method name="TweetsSearch">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,listparams:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
	do a.SetAt($li(listparams, 1), "q")
	do a.SetAt("popular", "result_type")
	do a.SetAt($li(listparams, 2), "count")
	do:($li(listparams, 2)="") a.SetAt(15, "count")
	//do ..AddParameter(a, "since_id", sinceId)
	//do ..AddParameter(a, "until", ..DateToString(until))
	
	#dim url = "https://" _ ..#ApiServer _ "/" _ ..#ApiSearchUrl
	#dim authHeader as %String = ##class(Util.Requests.Authorizer).%New().GetAuthHeader("get", url, a)
	
	#dim status as %Status = ##class(Util.Requests.RequestSender).SendHttpRequest(..#ApiServer, ..#ApiSearchUrl, a, .responseData, , authHeader)
	if (($length(responseData) > 0) && ($extract(responseData, 1) '= "["))
	{
		set responseData = "[" _ responseData _ "]"
	}
	
	set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
	quit status
]]></Implementation>
</Method>

<Method name="GetPlaceByCoords">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,lat:%Float,long:%Float</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
	do a.SetAt(lat, "lat")
	do a.SetAt(long, "long")
	
	#dim url = "https://" _ ..#ApiServer _ "/" _ ..#ApiTrendsClosestUrl
	#dim authHeader as %String = ##class(Util.Requests.Authorizer).%New().GetAuthHeader("get", url, a)
	set responseData = ""
	#dim status as %Status = ##class(Util.Requests.RequestSender).SendHttpRequest(..#ApiServer, ..#ApiTrendsClosestUrl, a, .responseData, , authHeader)
	//write responseData,!
	set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
	quit status
]]></Implementation>
</Method>

<Method name="GetTrendsByPlace">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,id:%Integer=1,exclude:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
	do a.SetAt(id, "id")
	do:(exclude'="") a.SetAt(exclude, "exclude")
	
	#dim url = "https://" _ ..#ApiServer _ "/" _ ..#ApiTrendsPlaceUrl
	#dim authHeader as %String = ##class(Util.Requests.Authorizer).%New().GetAuthHeader("get", url, a)
	set responseData = ""
	#dim status as %Status = ##class(Util.Requests.RequestSender).SendHttpRequest(..#ApiServer, ..#ApiTrendsPlaceUrl, a, .responseData, , authHeader)
	//write responseData,!
	set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
	quit status
]]></Implementation>
</Method>
</Class>
</Export>
