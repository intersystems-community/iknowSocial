<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Misc.EmotionalMarker">
<IncludeCode>%IKPublic</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>63579,66295.439709</TimeCreated>

<Property name="Entity">
<Type>%String</Type>
</Property>

<Property name="Weight">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>entity:%String,weight:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..Entity = entity
	set ..Weight = weight
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DirectlyApproveMarker">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[entity:%String,weigth:%String,&approved:Misc.EmotionalMarker]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set approved = ##class(Misc.EmotionalMarker).%New(entity, weigth)
	set status = approved.%Save()
	quit status
]]></Implementation>
</Method>

<Method name="ApproveMarkersFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set stream = ##class(%Stream.FileCharacter).%New()
	set sc = stream.LinkToFile(filename)
	quit:$$$ISERR(sc) sc
	
	set status = $$$OK
	
	set i = 0
	while 'stream.AtEnd {		
		set line = stream.ReadLine()
		
		if ($extract(line, 1) = "!") {
			continue
		}
		
		set weight = $piece(line, "#", 1)
		set i = i + 1
		
		set words = $listfromstring($piece(line, "#", 2), ",")
		set j = 1
		while ($listdata(words, j) '= 0) {
			
			set entity = $list(words, j)
			//w entity, weight, !
			set localStatus = ##class(Misc.EmotionalMarker).DirectlyApproveMarker(entity, weight)
			if ($$$ISOK(localStatus)) {
				w "Successfully proposed", !
			}
			set status = $$$ADDSC(status, localStatus)
			set j = j + 1
		}
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="ApproveMarkersFromArray">
<ClassMethod>1</ClassMethod>
<FormalSpec>dictionary:%ArrayOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set current = ""
	set status = $$$OK
	for {
		set current = dictionary.Next(current)
		if (current = "") {
			return status
		}
		set status = $$$ADDSC(status, ##class(Misc.ProposedEmotionalMarker).DirectlyApproveMarker(current, dictionary.GetAt(current)))
	}
	quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// for now last emotional assesment is proposed as right

]]></Content>
</UDLText>

<Method name="ProposeClosureForMarkerWithinDomain">
<ClassMethod>1</ClassMethod>
<FormalSpec>entity:%String,weight:%String,domainId:%String</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set arr = ##class(%ArrayOfDataTypes).%New()
	kill similarResult
	do ##class(%iKnow.Queries.EntityAPI).GetSimilar(.similarResult, domainId, entity, 1, 0, , ,$$$USEWORDS)
	
	if '($data(similarResult(1))) { 
		quit arr
	}
				
	set j = 1
	while $data(similarResult(j)) {
				
		set similarEntityId = $list(similarResult(j), 1)
		set similarEntity = ##class(%iKnow.Queries.EntityAPI).GetValue(domainId, similarEntityId)
				
		if (similarEntity '= entity) {
			do arr.SetAt(weight, similarEntity)
		}
		set j = j + 1
	}
	quit arr
]]></Implementation>
</Method>

<Method name="ProposeStringifiedJSONClosureForCSVOfMarkerIds">
<ClassMethod>1</ClassMethod>
<FormalSpec>stringifiedList:%String,domainId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result = ""
	set len = $length(stringifiedList, ",")
	for i = 0: 1: len {
		kill arr
		set marker = ##class(Misc.EmotionalMarker).%OpenId($piece(stringifiedList, ",", i + 1))
		if (marker = "") {
			continue
		}
		set arr = ..ProposeClosureForMarkerWithinDomain(marker.Entity, marker.Weight, domainId)
		set current = ""
		for {
			set current = arr.Next(current)
			if (current = "") {
				quit
			}
			set result = result _ ", """ _ current _ """: """ _ arr.GetAt(current) _ """"
		}
	}
	set result = "{" _ $extract(result, 2, $length(result)) _ "}"
	quit result
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Misc.EmotionalMarkerD</DataLocation>
<DefaultData>EmotionalMarkerDefaultData</DefaultData>
<IdLocation>^Misc.EmotionalMarkerD</IdLocation>
<IndexLocation>^Misc.EmotionalMarkerI</IndexLocation>
<StreamLocation>^Misc.EmotionalMarkerS</StreamLocation>
<Data name="EmotionalMarkerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Entity</Value>
</Value>
<Value name="3">
<Value>Weight</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
