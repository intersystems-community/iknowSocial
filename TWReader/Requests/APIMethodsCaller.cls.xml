<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="TWReader.Requests.APIMethodsCaller">
<Super>%RegisteredObject</Super>
<TimeCreated>63619,75001.090612</TimeCreated>

<Parameter name="MaxEntityQueryCount">
<Type>%Integer</Type>
<Default>100</Default>
</Parameter>

<Parameter name="BaseSSLURL">
<Default>https://api.twitter.com</Default>
</Parameter>

<Parameter name="SslTlsConfig">
<Default>Twitter</Default>
</Parameter>

<Parameter name="ApiServer">
<Default>api.twitter.com</Default>
</Parameter>

<Parameter name="ApiUserTimelineUrl">
<Default>1.1/statuses/user_timeline.json</Default>
</Parameter>

<Parameter name="ApiSearchUrl">
<Default>1.1/search/tweets.json</Default>
</Parameter>

<Parameter name="ApiTrendsClosestUrl">
<Default>1.1/trends/closest.json</Default>
</Parameter>

<Parameter name="ApiTrendsPlaceUrl">
<Default>1.1/trends/place.json</Default>
</Parameter>

<Parameter name="ApiRateLimitStatusUrl">
<Default>1.1/application/rate_limit_status.json</Default>
</Parameter>

<Method name="TweetsSearch">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,listparams:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    do a.SetAt($li(listparams, 1), "q")
    do a.SetAt("recent", "result_type")
    do a.SetAt($li(listparams, 2), "count")
    do:($li(listparams, 2)="") a.SetAt(15, "count")
    //do ..AddParameter(a, "since_id", sinceId)
    //do ..AddParameter(a, "until", ..DateToString(until))
    
    #dim url = "https://" _ ..#ApiServer _ "/" _ ..#ApiSearchUrl
    #dim authHeader as %String = ##class(Util.Requests.Authorizer).%New().GetAuthHeader("get", url, a)
    
    #dim status as %Status = ##class(Util.Requests.RequestSender).SendHttpRequest(..#ApiServer, ..#ApiSearchUrl, a, .responseData, , authHeader)
    if (($length(responseData) > 0) && ($extract(responseData, 1) '= "["))
    {
        set responseData = "[" _ responseData _ "]"
    }
    
    set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
    quit status
]]></Implementation>
</Method>

<Method name="CallApiArgs">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>apiServer:%String,api:%String,arrayArgs:%ArrayOfDataTypes,*responseText:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim url = "https://" _ apiServer _ "/" _ api
    #dim authHeader as %String = ##class(Util.Requests.Authorizer).%New().GetAuthHeader("get", url, arrayArgs)
    set responseText = ""
    quit ##class(Util.Requests.RequestSender).SendHttpRequest(apiServer, api, arrayArgs, .responseText, , authHeader)
]]></Implementation>
</Method>

<Method name="GetRateLimits">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    
    #dim status as %Status = ..CallApiArgs(..#ApiServer, ..#ApiRateLimitStatusUrl, a, .responseData)
    quit ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
]]></Implementation>
</Method>

<Method name="DebugIterator">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefix:%String="",o:%ZEN.proxyObject</FormalSpec>
<Implementation><![CDATA[
    #dim index As %String = ""
    for  {
        set index = $order(o.%data(index))
        quit:index=""
        if $isobject(o.%data(index)) {
            do ..DebugIterator(prefix _"|"_index, o.%data(index))
        } else {
            if index = "reset" {
                #dim unixTime As %integer = o.%data(index)
                #dim date As %Integer
                #dim time As %Numeric
                do ##class(Util.Misc).ConvertUnixTimeToHorolog(unixTime, .date, .time)
                #dim dateString As %String = $zdt(date _","_ time, 1, 5)

                //write $zcvt(prefix,"I","JSON")_"|" _index_ " = ", dateString,!
                write {"title":$piece($zcvt(prefix,"I","JSON"),"|",*),"name":index,"value":dateString}.$toJSON(),!
            } else {
                //write $zcvt(prefix,"I","JSON")_"|" _index_ " = ", o.%data(index),!
                write {"title":$piece($zcvt(prefix,"I","JSON"),"|",*),"name":index,"value":o.%data(index)}.$toJSON(),!
            }
        }
    }
]]></Implementation>
</Method>

<Method name="Debug">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    do ##class(TWReader.Requests.APIMethodsCaller).GetRateLimits(.response)
    do ..DebugIterator( ,response.resources)
]]></Implementation>
</Method>

<Method name="GetPlaceByCoords">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,lat:%Float,long:%Float</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    do a.SetAt(lat, "lat")
    do a.SetAt(long, "long")
    
    #dim status as %Status = ..CallApiArgs(..#ApiServer, ..#ApiTrendsClosestUrl, a, .responseData)
    quit ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
]]></Implementation>
</Method>

<Method name="GetTrendsByPlace">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,id:%Integer=1,exclude:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    do a.SetAt(id, "id")
    do:(exclude'="") a.SetAt(exclude, "exclude")
    #dim responseData As %String 

    #dim status as %Status = ..CallApiArgs(..#ApiServer, ..#ApiTrendsPlaceUrl, a, .responseData)
    quit ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
]]></Implementation>
</Method>

<Method name="GetTrendsByPlaceJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>*responseData:%String,id:%Integer=1,exclude:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    do a.SetAt(id, "id")
    do:(exclude'="") a.SetAt(exclude, "exclude")

    quit ..CallApiArgs(..#ApiServer, ..#ApiTrendsPlaceUrl, a, .responseData)
]]></Implementation>
</Method>
</Class>
</Export>
