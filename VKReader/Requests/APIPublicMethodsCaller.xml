<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="VKReader.Requests.APIPublicMethodsCaller">
<Description>
This class is actually API wrapper (with some properties disabled) for VK API.</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>63470,45984.335131</TimeCreated>

<Method name="RetrieveProxyObjectFromAPIRequest">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,method:%String,parameters:%ArrayOfDataTypes</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = ##class(VKReader.Requests.RequestSender).SendHttpRequest(,"method/" _ method, parameters, .responseData)
	quit:$$$ISERR(status) status
	
	set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
	quit status
]]></Implementation>
</Method>

<Method name="CheckAPIError">
<ClassMethod>1</ClassMethod>
<FormalSpec>object:%ZEN.proxyObject</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (object.error '= "") {
		set errorMessage = object.error."error_msg"
		set errorCode = object.error."error_code"
		set status = $system.Status.Error(5001, "VK API error: "_errorCode_" "_errorMessage)
		quit status
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="UsersGet">
<Description><![CDATA[
Returns extended users' information to array <b>response</b> of class <class>VKReader.Data.User</class>, given:<br>
<ul>
<li><b>userIds</b> - comma separated list of users vk ids or screen names (list length should be no more than 200).<br></li>
<li><b>fields</b> - comma separated list of additional fields required (only possible values for this wrapper : 'sex', 'bdate', 'city', 'country').<br></li>
<li><b>nameCase</b> - grammatical case for user's first and last name.<br></li>
</ul>
For more information see: <a href="http://vk.com/dev/users.get">users.get<a>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ArrayOfObjects,userIds:%String,fields:%String="",nameCase:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ($length(userIds) < 1)  || ($length(userIds, ",") > 200) {
		set status = $system.Status.Error(5001, "Number of user_ids must be positive integer not exceeding 200.")
		quit status
	}
	set parameters = ##class(%ArrayOfDataTypes).%New()
	do parameters.SetAt(userIds, "user_ids")
	if (fields '= "") {
		do parameters.SetAt(fields, "fields")
	}
	if (nameCase '= "") {
		do parameters.SetAt(nameCase, "name_case")
	}
	
	set status = ..RetrieveProxyObjectFromAPIRequest(.responseObject, "users.get", parameters)
	quit:$$$ISERR(status) status
	
	set status = ..CheckAPIError(responseObject)
	quit:$$$ISERR(status) status
	
	set responseObject = responseObject.response
	set response = ##class(%ArrayOfObjects).%New()
	for i = 1:1:responseObject.Count() {
		set userZenProxy = responseObject.GetAt(i)
		set user = ##class(VKReader.Data.User).%New(userZenProxy)
		set localStatus = response.SetAt(user, user.ID)
		set status = $$$ADDSC(status, localStatus)
	}
	if ($$$ISERR(status)) {
		set response = ""
	}
	quit status
]]></Implementation>
</Method>

<Method name="DatabaseGetCitiesById">
<Description><![CDATA[
Returns <b>response</b> array with city vk id as key and city name as value, given:<br>
<ul>
<li><b>cityIds</b> - comma separated list of city vk ids (no more than 1000)<br></li>
</ul>
For more information see: <a href="http://vk.com/dev/database.getCitiesById">database.getCitiesById</a>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ArrayOfDataTypes,cityIds:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (($length(cityIds) < 1) || ($length(cityIds, ",") > 1000)) {
		set status = $system.Status.Error(83, "Number of city_ids must be positive integer not exceeding 1000.")
		quit status
	}
	set parameters = ##class(%ArrayOfDataTypes).%New()
	do parameters.SetAt(cityIds, "city_ids")
	
	set status = ..RetrieveProxyObjectFromAPIRequest(.responseObject, "database.getCitiesById", parameters)
	quit:$$$ISERR(status) status
	
	set status = ..CheckAPIError(responseObject)
	quit:$$$ISERR(status) status
	
	set responseObject = responseObject.response
	set response = ##class(%ArrayOfDataTypes).%New()
	for i = 1:1:responseObject.Count() {
		set city = responseObject.GetAt(i)
		set localStatus = response.SetAt(city.title, city.id)
		set status = $$$ADDSC(status, localStatus)
	}
	if ($$$ISERR(status)) {
		set response = ""
	}
	quit status
]]></Implementation>
</Method>

<Method name="UtilsResolveScreenName">
<Description><![CDATA[
Returns type (user or community) to <b>type</b> and id of user or community to <b>objectId</b> with passed screenname:<br>
For more information see: <a href="http://vk.com/dev/utils.resolveScreenName">utils.resolveScreenName</a>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*type:%String,*objectId:%String,screenName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set parameters = ##class(%ArrayOfDataTypes).%New()
	do parameters.SetAt(screenName, "screen_name")
	
	set status = ..RetrieveProxyObjectFromAPIRequest(.responseObject, "utils.resolveScreenName", parameters)
	quit:$$$ISERR(status) status
	
	set status = ..CheckAPIError(responseObject)
	quit:$$$ISERR(status) status
	
	set responseObject = responseObject.response
	set type = responseObject.type
	set objectId = responseObject."object_id"
	quit status
]]></Implementation>
</Method>

<Method name="WallGet">
<Description><![CDATA[
Returns list of posts represented by class <class>VKReader.Data.Post</class> to <b>response</b> from specified wall, given:<br>
<ul>
<li><b>ownerId</b> - wall owner id.<br></li>
<li><b>domain</b> - wall owner screenname.<br></li>
<li><b>offset</b> - number of posts to skip at the beginning<br></li>
<li><b>filter</b> - setting for filtering (possible values are : 'all', 'others', 'owner', 'postponed', 'suggests')<br></li>
<li><b>count</b> - number of posts to return<br></li>
</ul>
For more information see: <a href="http://vk.com/dev/wall.get">wall.get</a>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ListOfObjects,ownerId:%String="",domain:%String="",offset:%String=0,filter:%String="",count:%Integer=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (($length(domain) > 0) && ($length(ownerId) > 0)) {
		set status = $system.Status.Error(5001, "'ownerId' and 'domain' can not be specified simultaneously.")
		quit status
	}
	if ((ownerId = "") && (domain = "")) {
		set status = $system.Status.Error(5001, "At least one of 'onwerId' and 'domain' arguments must be specified")
		quit status
	}
	if (($length(filter) > 0) && (filter '= "all") && (filter '= "others") && (filter '= "owner") && (filter '= "postponed") && (filter '= "suggests")) {
		set status = $system.Status.Error(5001, "Invalid value passed as filter.")
		quit status
	}
	set parameters = ##class(%ArrayOfDataTypes).%New()
	if (ownerId '= "") {
		set status = ##class(VKReader.Utils).IsInteger(ownerId)
		if ($$$ISERR(status)) {
			set status = $system.Status.Error(5001, "'ownerId' has non-integer value.")
			quit status
		}
		do parameters.SetAt(ownerId, "owner_id")
	} else {
		do parameters.SetAt(domain, "domain")
	} 
	if (offset '= 0) {
		do parameters.SetAt(offset, "offset")
	}
	if ($length(filter) > 0) {
		do parameters.SetAt(filter, "filter")
	}
	if (##class(VKReader.Utils).IsInteger(count) && (count > 0)) {
		do parameters.SetAt(count, "count")
	} else {
		set status = $system.Status.Error(5001, "'count' value must be positive integer")
		quit status
	}
	
	set status = ..RetrieveProxyObjectFromAPIRequest(.responseObject, "wall.get", parameters)
	quit:$$$ISERR(status) status
	
	set status = ..CheckAPIError(responseObject)
	quit:$$$ISERR(status) status
	
	set responseObject = responseObject.response.items
	set response = ##class(%ListOfObjects).%New()
	for i = 1:1:responseObject.Count() {
		set postZenProxy = responseObject.GetAt(i)
		set post = ##class(VKReader.Data.Post).%New(postZenProxy)
		set localStatus = response.Insert(post)
		set status = $$$ADDSC(status, localStatus)
	}
	if ($$$ISERR(status)) {
		set response = ""
	}
	quit status
]]></Implementation>
</Method>

<Method name="WallSearch">
<Description><![CDATA[
Returns list of posts represented by class <class>VKReader.Data.Post</class> to <b>response</b> from (un)specified wall searched by query, given:<br>
<ul>
<li><b>query</b> - phrase to search with<br></li>
<li><b>ownerId</b> - wall owner id.<br></li>
<li><b>domain</b> - wall owner screenname.<br></li>
<li><b>offset</b> - number of posts to skip at the beginning<br></li>
<li><b>ownersOnly</b> - mark this as true to search only posts authored by wall's owner<br></li>
<li><b>count</b> - number of posts to return<br></li>
</ul>
For more information see: <a href="http://vk.com/dev/wall.search">wall.search</a>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ListOfObjects,query:%String,ownerId:%String="",domain:%String="",offset:%String=0,ownersOnly:%String=0,count:%Integer=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (($length(domain) > 0) && ($length(ownerId) > 0)) {
		set status = $system.Status.Error(5001, "'ownerId' and 'domain' can not be specified simultaneously.")
		quit status
	}
	if ((ownerId = "") && (domain = "")) {
		set status = $system.Status.Error(5001, "At least one of 'onwerId' and 'domain' arguments must be specified")
		quit status
	}
	set parameters = ##class(%ArrayOfDataTypes).%New()
	if (ownerId '= "") {
		set status = ##class(VKReader.Utils).IsInteger(ownerId)
		if ($$$ISERR(status)) {
			set status = $system.Status.Error(5001, "'ownerId' has non-integer value.")
			quit status
		}
		do parameters.SetAt(ownerId, "owner_id")
	} else {
		do parameters.SetAt(domain, "domain")
	} 
	if (offset '= 0) {
		do parameters.SetAt(offset, "offset")
	}
	do parameters.SetAt(query, "query")
	if (ownersOnly '= 0) {
		if (ownersOnly '= 1) {
			set status = $system.Status.Error(5001, "ownersOnly must have boolean value.")
			quit status
		}
		do parameters.SetAt(ownersOnly, "owners_only")
	}
	if (##class(VKReader.Utils).IsInteger(count) && (count > 0)) {
		do parameters.SetAt(count, "count")
	} else {
		set status = $system.Status.Error(5001, "'count' value must be positive integer")
		quit status
	}
	
	set status = ..RetrieveProxyObjectFromAPIRequest(.responseObject, "wall.search", parameters)
	quit:$$$ISERR(status) status
	
	set status = ..CheckAPIError(responseObject)
	quit:$$$ISERR(status) status
	
	set responseObject = responseObject.response.items
	set response = ##class(%ListOfObjects).%New()
	for i = 1:1:responseObject.Count() {
		set postZenProxy = responseObject.GetAt(i)
		set post = ##class(VKReader.Data.Post).%New(postZenProxy)
		set localStatus = response.Insert(post)
		set status = $$$ADDSC(status, localStatus)
	}
	if ($$$ISERR(status)) {
		set response = ""
	}
	quit status
]]></Implementation>
</Method>

<Method name="NewsfeedSearch">
<Description><![CDATA[
Returns list of posts represented by class <class>VKReader.Data.Post</class> to <b>response</b> from the whole vk newsfeed searched by query, given:<br>
<ul>
<li><b>query</b> - phrase to search with<br></li>
<li><b>count</b> - number of posts to return<br></li>
<li><b>latitude</b> and <b>longitude</b> - geographical ccordinates of the point to search nearby (numeric values in ranges [-90;90] and [-180;180] accordingly)<br></li>
<li><b>startDate</b>, <b>startTime</b>, <b>endDate</b> and <b>endTime</b> - horolog values to specify time range of search.</li>
</ul>
For more information see: <a href="http://vk.com/dev/newsfeed.search">newsfeed.search<a>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ListOfObjects,query:%String,count:%Integer=1,latitude:%Numeric="",longitude:%Numeric="",startDate:%Date="",startTime:%Time="",endDate:%Date="",endTime:%Time=""</FormalSpec>
<Implementation><![CDATA[
	set parameters = ##class(%ArrayOfDataTypes).%New()
	do parameters.SetAt(query, "q")
	if (##class(VKReader.Utils).IsInteger(count) && (count > 0)) {
		do parameters.SetAt(count, "count")
	} else {
		set status = $system.Status.Error(5001, "'count' value must be positive integer")
		quit status
	}
	if ($length(latitude) > 0) {
		if ($isvalidnum(latitude) && (latitude <= 90) && (latitude >= -90)) {
			do parameters.SetAt(latitude, "latitude")
		} else {
			set status = $system.Status.Error(5001, "'latitude' value must be double from [-90; 90] segment.")
			quit status
		}
	}
	if ($length(longitude) > 0) {
		if ($isvalidnum(longitude) && (longitude <= 180) && (longitude >= -180)) {
			do parameters.SetAt(longitude, "longitude")
		} else {
			set status = $system.Status.Error(5001, "'longitude' value must be double from [-180; 180] segment.")
			quit status
		}
	}
	if (($length(startDate) > 0) && ($length(startTime) > 0)) {
		if (##class(VKReader.Utils).IsValidDateAndTime(startDate, startTime)) {
			do parameters.SetAt(##class(VKReader.Utils).ConvertHorologToUnixTime(startDate, startTime), "start_time")
		} else {
			set status = $system.Status.Error(5001, "Incorrect time value passed for <startDate, startTime>.")
			quit status
		}
	}
	if (($length(endDate) > 0) && ($length(endTime) > 0)) {
		if (##class(VKReader.Utils).IsValidDateAndTime(endDate, endTime)) {
			do parameters.SetAt(##class(VKReader.Utils).ConvertHorologToUnixTime(endDate, endTime), "end_time")
		} else {
			set status = $system.Status.Error(5001, "Incorrect time value passed for <endDate, endTime>.")
			quit status
		}
	}
	
	set status = ..RetrieveProxyObjectFromAPIRequest(.responseObject, "newsfeed.search", parameters)
	quit:$$$ISERR(status) status
	
	set status = ..CheckAPIError(responseObject)
	quit:$$$ISERR(status) status
	
	set responseObject = responseObject.response.items
	set response = ##class(%ListOfObjects).%New()
	for i = 1:1:responseObject.Count() {
		set postZenProxy = responseObject.GetAt(i)
		set post = ##class(VKReader.Data.Post).%New(postZenProxy)
		set localStatus = response.Insert(post)
		set status = $$$ADDSC(status, localStatus)
	}
	if ($$$ISERR(status)) {
		set response = ""
	}
	quit status
]]></Implementation>
</Method>
</Class>
</Export>
