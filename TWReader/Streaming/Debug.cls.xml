<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="TWReader.Streaming.Debug">
<Super>%RegisteredObject,Util.Http.IChunkCallback</Super>
<TimeCreated>63932,59399.284888</TimeCreated>

<Parameter name="SupportedLanguages">
<Description>
FIXME - we do not handle anything beyond Russian and Ukrainian. Beware! Enable
all the rest languages if you need to!
Parameter SupportedLanguages = ",ru,ua,en,fr";</Description>
<Default>,ru,ua</Default>
</Parameter>

<Method name="Relevant">
<ClassMethod>1</ClassMethod>
<FormalSpec>place:%String,lang:%String</FormalSpec>
<Implementation><![CDATA[
    // 1. TODO - to implement place to geo translation to match only relevant places (cities, countries)
    // 2. match tweet language - only iknow enabled are of interest for us
    #dim known As %String = $lfs(..#SupportedLanguages,",")
    if $listfind(known, lang) {
        return $$$OK
    }
    return '$$$OK
]]></Implementation>
</Method>

<Method name="%OnHttpReceive">
<FormalSpec>Data:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // FIXME - some callbaks require merging of neighbourhood calss, and were ppartial JSON
    // dunno how to make them to merge easily
    // those cases will indicate themselves ass strange undefined properties in the proxyObject
    // after parse: i.e. required property "user" will be not defined in such case
    // or timestampt or anything other, the same odd
    
    #dim status As %Status = $$$OK
    set oldIO = $IO use 0
    #dim proxyObject As %ZEN.proxyObject
    set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Data, ,.proxyObject)
    goto:$$$ISERR(status) close
    try {
        if $isobject(proxyObject) {
            #dim user As %ZEN.proxyObject = proxyObject.user
            #dim username As %String = $select($isobject(user):user."screen_name", 1:"")
            #dim text As %String = ##class(Util.Misc).RegexpReplace(##class(TWReader.Data.Tweet).CleanValue(proxyObject.text), "\r?\n", " ")
            #dim lang As %String = proxyObject.lang
            #dim place As %String = proxyObject.place
            if place = "" && $isobject(proxyObject.user) {
                set place = proxyObject.user.place
            }
            #dim isReleant As %Boolean = ..Relevant($get(place), $get(lang))
            write "@",username, "[", lang, ":", $select(isReleant:"Y",1:"N"),"]", text,!
            if isReleant {
                if $$$ISOK(##class(TWReader.Data.Context).SaveTweet(proxyObject)) {
                    do ..RebuildIknow(1, 0)
                }
            }
        }
    } 
    catch {
        write "*** exception ***:", $zerror,!
        do BACK^%ETN
    }
close
    use oldIO
    if ..IsPendingStop() {
        ztrap "TERMINATE"
    }
    return $$$OK
]]></Implementation>
</Method>

<Method name="CleanDataExtents">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    do ##class(TWReader.Data.User).%DeleteExtent()
    do ##class(TWReader.Data.Tweet).%DeleteExtent()
    do ##class(TWReader.Data.Trend).%DeleteExtent()
    do ##class(TWReader.IKnowDomain).%DropData(1,1)
    //do ##class(TWReader.UIBroker).SaveMorePostsByCoords("0", "100", "46.4846", "30.7326", 1)
    //do ##class(TWReader.UIBroker).FetchMorePosts(0, 100, "Харькова", 1)
    do ##class(Misc.SentimentMarker).ApproveMarkersFromFile("C:\Users\Timur\Documents\Intersystems\src\VKFB\data\ru\2.txt",1)
]]></Implementation>
</Method>

<Method name="InitKeywords">
<ClassMethod>1</ClassMethod>
<FormalSpec>keys:%String,*array:%String</FormalSpec>
<Implementation><![CDATA[
    for i=1:1:$length(keys,",") {
        set array($piece(keys,",",i))="***"
    }
]]></Implementation>
</Method>

<Method name="GetInitialTrends">
<ClassMethod>1</ClassMethod>
<FormalSpec>woeid:%String,*array:%String</FormalSpec>
<Implementation><![CDATA[
    #dim response As %ZEN.proxyObject
    do ##class(TWReader.Rest.Api).GetTrendsByPlace(.response, woeid)
    #dim i As %Integer
    #dim trends As %ListOfObjects = response.GetAt(1).trends
    for i=1:1:trends.Count() {
        #dim trend = trends.GetAt(i)
        set array(trend.name) = trend."tweet_volume"
    }
]]></Implementation>
</Method>

<Method name="GetKeys">
<ClassMethod>1</ClassMethod>
<FormalSpec>*array</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim s As %String = ""
    #dim index As %String = ""
    do {
        set index = $order(array(index),1,value)
        quit:index=""
        if s'="" { 
            set s = s_","_index
        } else {
            set s = index
        }
    } while 1
    set s = $tr(s," ","+")
    return s
]]></Implementation>
</Method>

<Method name="LogArgs">
<ClassMethod>1</ClassMethod>
<FormalSpec>title:%String,sw:%String,ne:%String,*array</FormalSpec>
<Implementation><![CDATA[
    set keys = ..GetKeys(.array)
    write "Using query (", title, ") ", "track="_keys_"&locations="_sw_","_ne,!
]]></Implementation>
</Method>

<Method name="IsLocked">
<ClassMethod>1</ClassMethod>
<FormalSpec>gloRef:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    return $data(^$LOCK(gloRef))
]]></Implementation>
</Method>

<Method name="IsPendingStop">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    return ..IsLocked($name(^TWReader.Job("PendingStop")))
]]></Implementation>
</Method>

<Method name="SetPendingStop">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    lock ^TWReader.Job("PendingStop")
    quit $$$OK
]]></Implementation>
</Method>

<Method name="IsRunning">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    return ..IsLocked($name(^TWReader.Job("Running")))
]]></Implementation>
</Method>

<Method name="DebugJob">
<ClassMethod>1</ClassMethod>
<FormalSpec>Key:%String="lviv",ResetData:%Boolean=1,RebuildDomain:%Boolean=1,SentimentAnalysis:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // check there is no another background job running
    //lock +^TWReader.Job("Running"):0
    //if '$test {
    if ..IsRunning() {
        quit '$$$OK
    }
    lock +^TWReader.Job("Running")#"E"
    
    // clear pending stop lock, if there is any
    lock -^TWReader.Job("PendingStop")
    job ..Debug(Key, ResetData, RebuildDomain, SentimentAnalysis)
]]></Implementation>
</Method>

<Method name="CleanupLocks">
<Description>
clear background job locks</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    lock -^TWReader.Job("PendingStop"):0
    lock -^TWReader.Job("Running"):0
]]></Implementation>
</Method>

<Method name="Debug">
<ClassMethod>1</ClassMethod>
<FormalSpec>Key:%String,ResetData:%Boolean=1,RebuildDomain:%Boolean=1,SentimentAnalysis:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
    if ResetData { 
        do ..CleanDataExtents() 
    }
    #dim ne,sw As %String = ""
    #dim woeid As %Numeric
    #dim lowKey As %String = $zcvt(Key, "l")
    #dim ukrainanWords As %String = "Ukraine,Украина,ГПУ,АТО"
    #dim russianWords As %String = "Russia,Россия,Российская+Федерация,ВКС"
    #dim kazakhWords As %String = "Казахстан,Kazakhstan,egovkz,ЦОН,OpenData"

    if lowKey = "moscow" {
        set ne = "56.950164,40.285724" // "55.9576,37.967609"
        set sw = "54.660273,35.199055" // "55.4907,37.31926"
        set woeid = 2122265
        set keys = russianWords_",Москва,Moscow"
    } elseif lowKey = "st.pete" {
        set ne = "60.241791,30.75886"
        set sw = "59.633801,29.424641"
        set woeid = 2123260
        set keys = russianWords_",Питер,Санкт-Петербург,С-Петербург,Saint-Peterburgh,Saint-Peterburg,St.Peterburg"
    } elseif lowKey = "russia" {
        //set ne = "81.856903,-168.997849"
        set ne = "81.856903,190.997849"
        set sw = "41.185902,19.638861"
        set woeid = 23424936
        set keys = russianWords
    } elseif lowKey = "kiev" {
        set ne = "50.316879,30.355551"
        set sw = "50.529751,30.581539"
        set woeid = 924938
        set keys = ukrainanWords_",Kiev,Киев"
    } elseif lowKey = "kharkiv" {
        set ne = "50.067001,36.430191"
        set sw = "49.889118,36.066051"
        set woeid = 922137
        set keys = ukrainanWords_",Харьков,Kharkiv"
    } elseif lowKey = "lviv" {
        set ne = "49.897499,24.1388"
        set sw = "49.781319,23.924561"
        set woeid = 924943
        set keys = ukrainanWords_",Львов,Lviv"
    } elseif lowKey = "ukraine" {
        set ne = "52.375359,40.218079"
        set sw = "44.390411,22.128811"
        set woeid = 23424976
        set keys = ukrainanWords
    } elseif lowKey = "astana" {
        set ne = "51.221821,71.497452"
        set sw = "51.153999,71.378922"
        set woeid = 2264962
        set keys = kazakhWords_",Астана,Astana"
    } elseif lowKey = "kazakhstan" {
        set ne = "55.431808,87.312737"
        set sw = "40.566689,46.491859"
        set woeid = 23424871
        set keys = kazakhWords
    } elseif lowKey = "almaty" {
        set ne = "43.397442,77.01651"
        set sw = "43.179569,76.833511"
        set woeid = 2255777
        set keys = kazakhWords
    }
    // FIXME - ok, Twitter uses geoJSON order (longitude,latitude)
    // FIXME - but Google uses (latitude,longitude), we recorded them from Google or 
    // geoplanet-explorer http://isithackday.com/geoplanet-explorer/index.php?start=City
    // so we need to reverse them back
    #dim x, y As %Numeric
#define SwapNums(%string,%x,%y) set $lb(%x,%y) = $lfs(%string,","), %string = $lts($lb(%y,%x),",")
    $$$SwapNums(ne,x,y)
    $$$SwapNums(sw,x,y)
    #dim keywords 
    do ..InitKeywords(keys, .keywords)
    do ..LogArgs("initial arguments", sw, ne, .keywords)
    do ..GetInitialTrends(woeid, .keywords)
    do ..LogArgs("arguments with trends merged", sw, ne, .keywords)
    set keys = ..GetKeys(.keywords)
    #dim debugObject As TWReader.Streaming.Debug = ..%New()
    do ..RebuildIknow(RebuildDomain, SentimentAnalysis)
    do ##class(TWReader.Streaming.Api).DebugApiCall("/1.1/statuses/filter.json","locations="_sw_","_ne_"&track="_keys, debugObject)
    do ..CleanupLocks()
]]></Implementation>
</Method>

<Method name="RebuildIknow">
<ClassMethod>1</ClassMethod>
<FormalSpec>RebuildDomain:%Boolean,SentimentAnalysis:%Boolean</FormalSpec>
<Implementation><![CDATA[
    #dim context As Util.Data.Context = ##class(TWReader.Data.Context).%New(0)
    if RebuildDomain {
        do context.Rebuild(0) // no need to reset domain again
    }
    if SentimentAnalysis {
        do context.CalculateEmotionalColoring()
    }
]]></Implementation>
</Method>
</Class>
</Export>
