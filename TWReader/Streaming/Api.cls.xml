<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="TWReader.Streaming.Api">
<Super>TWReader.Rest.Api,Util.Http.IChunkCallback</Super>
<TimeCreated>63915,60460.976583</TimeCreated>

<Parameter name="ApiServer">
<Default>stream.twitter.com</Default>
</Parameter>

<Parameter name="Verbose">
<Default>1</Default>
</Parameter>

<Parameter name="MaxLogLength">
<Default>120</Default>
</Parameter>

<Method name="%OnHttpReceive">
<FormalSpec>Data:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim status As %Status = $$$OK
    set oldIO = $IO use 0
#if 0
    #dim proxyObject As %ZEN.proxyObject
    set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Data, ,.proxyObject)
    goto:$$$ISERR(status) close
    try {
        if $isobject(proxyObject) {
            #dim username As %String = proxyObject.user."screen_name"
            #dim text As %String = ##class(Util.Misc).RegexpReplace(##class(TWReader.Data.Tweet).CleanValue(proxyObject.text), "\r?\n", " ")
            #dim lang As %String = proxyObject.lang

            write "@",username, ":[", lang, "]", text,!
        }
        if $$$ISOK(##class(TWReader.Data.Context).SaveTweet(proxyObject)) {
            do ..RebuildIknow(0, 0)
        }
    } 
    catch {
        do BACK^%ETN
    }
close
#else

    if ..#Verbose {
        write $extract(Data, 1, ..#MaxLogLength),"...",!
    }
#endif
    use oldIO
    return $$$OK
]]></Implementation>
</Method>

<Method name="Write">
<FormalSpec>data:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#if 0
    // FIXE - uncomment when inherit from %Stream.TmpCharacter
    do ..%OnHttpReceive(data)
    quit ##super(data)
#endif
]]></Implementation>
</Method>

<Method name="CallApiArgs">
<Description>
Almost the same as CallApiArgs from REST API, but providing streaming callbacks</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>apiServer:%String,api:%String,arrayArgs:%ArrayOfDataTypes,*responseText:%String,callback:Util.Http.IChunkCallback=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim url As %String = ""
    
    if $match(api,"^https?:.*/.*") { // Full URL given in api will override everything
        // do ..SplitUrl(api, .url, .api)
        set url = api
    } else {
        if $match(apiServer, "^https?:.*") {
            set url = apiServer
        } else {
            set url = "https://" _ apiServer
        }
        if $match(api, "^/.*") {
            set url = url _ api
        } else {
            set url = url _ "/" _ api
        }
    }
    #dim authorizer As TWReader.Authorizer = ##class(Util.Requests.Authorizer).%New()
    #dim authHeader as %String = authorizer.GetAuthHeader("get", url, arrayArgs)

    if '$isobject(callback) {
        set callback = ..%New()
    }
    set responseText = ""

    return ##class(Util.Requests.RequestSender).SendHttpRequest(apiServer, api, arrayArgs, .responseText, $$$HTTPLOGLEVEL, authHeader, callback)
]]></Implementation>
</Method>
</Class>
</Export>
