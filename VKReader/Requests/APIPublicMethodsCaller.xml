<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="VKReader.Requests.APIPublicMethodsCaller">
<Description>
This class is actually API wrapper (with some properties disabled) for VK API.</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>63470,45984.335131</TimeCreated>

<Method name="UsersGet">
<Description><![CDATA[
Returns extended users' information to array 'response' of class VKReader.Data.User, given:<br>
'userIds' - comma separated list of users vk ids or screen names.<br>
'fields' - comma separated list of additional fields required (only possible values for this wrapper : 'sex', 'bdate', 'city', 'country').<br>
'nameCase' - grammatical case for user's first and last name.<br>
For more information see: http://vk.com/dev/users.get]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ArrayOfObjects,userIds:%String,fields:%String="",nameCase:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ($length(userIds) < 1)  || ($length(userIds, ",") > 1000) {
		set status = $system.Status.Error(5001, "Number of user_ids must be positive integer not exceeding 1000.")
		quit status
	}
	set parameters = ##class(%ArrayOfDataTypes).%New()
	do parameters.SetAt(userIds, "user_ids")
	if (fields '= "") {
		do parameters.SetAt(fields, "fields")
	}
	if (nameCase '= "") {
		do parameters.SetAt(nameCase, "name_case")
	}
	set status = ##class(VKReader.Requests.RequestSender).SendHttpRequest(,"method/users.get", parameters, .responseData)
	if ($$$ISERR(status)) {
		quit status
	}
	#dim responseObject As %ZEN.proxyObject
	set status = status * ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .responseObject)
	if ($$$ISERR(status)) {
		quit status
	}
	if (responseObject.error '= "") {
		set errorMessage = responseObject.error."error_msg"
		set errorCode = responseObject.error."error_code"
		set status = $system.Status.Error(5001, "VK API error: "_errorCode_" "_errorMessage)
		quit status
	}
	set responseObject = responseObject.response
	set response = ##class(%ArrayOfObjects).%New()
	for i = 1:1:responseObject.Count() {
		set userZenProxy = responseObject.GetAt(i)
		set user = ##class(VKReader.Data.User).%New(userZenProxy)
		set localStatus = response.SetAt(user, user.ID)
		set status = $$$ADDSC(status, localStatus)
	}
	if ($$$ISERR(status)) {
		set response = ""
	}
	quit status
]]></Implementation>
</Method>

<Method name="DatabaseGetCitiesById">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ArrayOfDataTypes,cityIds:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (($length(cityIds) < 1) || ($length(cityIds, ",") > 1000)) {
		set status = $system.Status.Error(83, "Number of city_ids must be positive integer not exceeding 1000.")
		quit status
	}
	set parameters = ##class(%ArrayOfDataTypes).%New()
	do parameters.SetAt(cityIds, "city_ids")
	set status = ##class(VKReader.Requests.RequestSender).SendHttpRequest(,"method/database.getCitiesById", parameters, .responseData)
	if ($$$ISERR(status)) {
		quit status
	}
	#dim responseObject As %ZEN.proxyObject
	set status = status * ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .responseObject)
	if (responseObject.error '= "") {
		set errorMessage = responseObject.error."error_msg"
		set errorCode = responseObject.error."error_code"
		set status = $system.Status.Error(5001, "VK API error: "_errorCode_" "_errorMessage)
		quit status
	}
	set responseObject = responseObject.response
	set response = ##class(%ArrayOfDataTypes).%New()
	for i = 1:1:responseObject.Count() {
		set city = responseObject.GetAt(i)
		set localStatus = response.SetAt(city.title, city.id)
		set status = $$$ADDSC(status, localStatus)
	}
	if ($$$ISERR(status)) {
		set response = ""
	}
	quit status
]]></Implementation>
</Method>

<Method name="UtilsResolveScreenName">
<ClassMethod>1</ClassMethod>
<FormalSpec>*type:%String,*objectId:%String,screenName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set parameters = ##class(%ArrayOfDataTypes).%New()
	do parameters.SetAt(screenName, "screen_name")
	set status = ##class(VKReader.Requests.RequestSender).SendHttpRequest(, "method/utils.resolveScreenName", parameters, .responseData)
	if ($$$ISERR(status)) {
		quit status
	}
	#dim responseObject As %ZEN.proxyObject
	set status = status * ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .responseObject)
	if (responseObject.error '= "") {
		set errorMessage = responseObject.error."error_msg"
		set errorCode = responseObject.error."error_code"
		set status = $system.Status.Error(5001, "VK API error: "_errorCode_" "_errorMessage)
		quit status
	}
	set responseObject = responseObject.response
	set type = responseObject.type
	set objectId = responseObject."object_id"
	quit status
]]></Implementation>
</Method>

<Method name="WallGet">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ListOfObjects,ownerId:%String="",domain:%String="",offset:%String=0,filter:%String="",count:%Integer=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (($length(domain) > 0) && ($length(ownerId) > 0)) {
		set status = $system.Status.Error(5001, "'ownerId' and 'domain' can not be specified simultaneously.")
		quit status
	}
	if ((ownerId = "") && (domain = "")) {
		set status = $system.Status.Error(5001, "At least one of 'onwerId' and 'domain' arguments must be specified")
		quit status
	}
	if (($length(filter) > 0) && (filter '= "all") && (filter '= "others") && (filter '= "owner") && (filter '= "postponed") && (filter '= "suggests")) {
		set status = $system.Status.Error(5001, "Invalid value passed as filter.")
		quit status
	}
	set parameters = ##class(%ArrayOfDataTypes).%New()
	if (ownerId '= "") {
		set status = ##class(VKReader.Utils).IsInteger(ownerId)
		if ($$$ISERR(status)) {
			set status = $system.Status.Error(5001, "'ownerId' has non-integer value.")
			quit status
		}
		do parameters.SetAt(ownerId, "owner_id")
	} else {
		do parameters.SetAt(domain, "domain")
	} 
	if (offset '= 0) {
		do parameters.SetAt(offset, "offset")
	}
	if ($length(filter) > 0) {
		do parameters.SetAt(filter, "filter")
	}
	if (##class(VKReader.Utils).IsInteger(count) && (count > 0)) {
		do parameters.SetAt(count, "count")
	} else {
		set status = $system.Status.Error(5001, "'count' value must be positive integer")
		quit status
	}
	set status = ##class(VKReader.Requests.RequestSender).SendHttpRequest(,"method/wall.get", parameters, .responseData)
	if ($$$ISERR(status)) {
		quit status
	}
	#dim responseObject As %ZEN.proxyObject
	set status = status * ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .responseObject)
	if ($$$ISERR(status)) {
		quit status
	}
	if (responseObject.error '= "") {
		set errorMessage = responseObject.error."error_msg"
		set errorCode = responseObject.error."error_code"
		set status = $system.Status.Error(5001, "VK API error: "_errorCode_" "_errorMessage)
		quit status
	}
	set responseObject = responseObject.response.items
	set response = ##class(%ListOfObjects).%New()
	for i = 1:1:responseObject.Count() {
		set postZenProxy = responseObject.GetAt(i)
		set post = ##class(VKReader.Data.Post).%New(postZenProxy)
		set localStatus = response.Insert(post)
		set status = $$$ADDSC(status, localStatus)
	}
	if ($$$ISERR(status)) {
		set response = ""
	}
	quit status
]]></Implementation>
</Method>

<Method name="WallSearch">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ListOfObjects,query:%String,ownerId:%String="",domain:%String="",offset:%String=0,ownersOnly:%String=0,count:%Integer=1</FormalSpec>
<Implementation><![CDATA[
	if (($length(domain) > 0) && ($length(ownerId) > 0)) {
		set status = $system.Status.Error(5001, "'ownerId' and 'domain' can not be specified simultaneously.")
		quit status
	}
	if ((ownerId = "") && (domain = "")) {
		set status = $system.Status.Error(5001, "At least one of 'onwerId' and 'domain' arguments must be specified")
		quit status
	}
	set parameters = ##class(%ArrayOfDataTypes).%New()
	if (ownerId '= "") {
		set status = ##class(VKReader.Utils).IsInteger(ownerId)
		if ($$$ISERR(status)) {
			set status = $system.Status.Error(5001, "'ownerId' has non-integer value.")
			quit status
		}
		do parameters.SetAt(ownerId, "owner_id")
	} else {
		do parameters.SetAt(domain, "domain")
	} 
	if (offset '= 0) {
		do parameters.SetAt(offset, "offset")
	}
	do parameters.SetAt(query, "query")
	if (ownersOnly '= 0) {
		if (ownersOnly '= 1) {
			set status = $system.Status.Error(5001, "ownersOnly must have boolean value.")
			quit status
		}
		do parameters.SetAt(ownersOnly, "owners_only")
	}
	if (##class(VKReader.Utils).IsInteger(count) && (count > 0)) {
		do parameters.SetAt(count, "count")
	} else {
		set status = $system.Status.Error(5001, "'count' value must be positive integer")
		quit status
	}
	set status = ##class(VKReader.Requests.RequestSender).SendHttpRequest(,"method/wall.search", parameters, .responseData)
	if ($$$ISERR(status)) {
		quit status
	}
	#dim responseObject As %ZEN.proxyObject
	set status = status * ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .responseObject)
	if ($$$ISERR(status)) {
		quit status
	}
	if (responseObject.error '= "") {
		set errorMessage = responseObject.error."error_msg"
		set errorCode = responseObject.error."error_code"
		set status = $system.Status.Error(5001, "VK API error: "_errorCode_" "_errorMessage)
		quit status
	}
	set responseObject = responseObject.response.items
	set response = ##class(%ListOfObjects).%New()
	for i = 1:1:responseObject.Count() {
		set postZenProxy = responseObject.GetAt(i)
		set post = ##class(VKReader.Data.Post).%New(postZenProxy)
		set localStatus = response.Insert(post)
		set status = $$$ADDSC(status, localStatus)
	}
	if ($$$ISERR(status)) {
		set response = ""
	}
	quit status
]]></Implementation>
</Method>
</Class>
</Export>
