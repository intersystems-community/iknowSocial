<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="VKReader.Requests.RequestMaker">
<Super>%RegisteredObject</Super>
<TimeCreated>63466,52744.38293</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/* This class provides ability to make calls to open (no auth key demanded) vk api methods */

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//TODO: tests for request forming methods

]]></Content>
</UDLText>

<Method name="RequestArrayToQueryString">
<ClassMethod>1</ClassMethod>
<FormalSpec>action:%String,scheme:%String,host:%String,page:%String,parameters:%ArrayOfDataTypes</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim queryString as %String = ""
	set queryString = queryString _ $zconvert(action, "U") _ " " _ scheme _ "://" _ ##class(Utils).UrlEncode(host) _ "/"
	_ page _ ..ArrayToEncodedParameterString(parameters)
	quit queryString
]]></Implementation>
</Method>

<Method name="ArrayToEncodedParameterString">
<ClassMethod>1</ClassMethod>
<FormalSpec>a:%ArrayOfDataTypes</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim parameterString as %String = ""
	#dim k as %String = ""
	// Build the parameter string, of the form: [?a[=b][&c[=d]...]]
	set k = ""
	while (1)
	{
		#dim v as %String = a.GetNext(.k)
		quit:k=""  
		do ..AppendEncodedParameterToParameterString(.parameterString, k, v)
	}
	quit parameterString
]]></Implementation>
</Method>

<Method name="AppendEncodedParameterToParameterString">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&parameterString:%String,k:%String,v:%String=""]]></FormalSpec>
<Implementation><![CDATA[
	if (k '= "")
	{
		if ($length(parameterString) > 0)
		{
			set parameterString = parameterString _ "&"
		} else {
			set parameterString = "?"
		}
		if (v = "")
		{
			set parameterString = parameterString _ ##class(Utils).UrlEncode(k)
		}
		else
		{
			set parameterString = parameterString _ ##class(Utils).UrlEncode(k) _ "=" _ ##class(Utils).UrlEncode(v)
		}
	}
]]></Implementation>
</Method>

<Method name="CreateSignature">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String,key:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $system.Encryption.HMACSHA1(text, key)
]]></Implementation>
</Method>

<Method name="AppendArray">
<ClassMethod>1</ClassMethod>
<FormalSpec>a:%ArrayOfDataTypes,b:%ArrayOfDataTypes</FormalSpec>
<Implementation><![CDATA[
	if (b '= "")
	{
		#dim k as %String = ""
		set k = ""
		while (1)
		{
			#dim v as %String = b.GetNext(.k)
			quit:k=""
			do a.SetAt(v, k)
		}
	}
]]></Implementation>
</Method>

<Method name="AddParameter">
<ClassMethod>1</ClassMethod>
<FormalSpec>a:%ArrayOfDataTypes,k:%String,v:%String="",defaultV:%String="UNFEASIBLE STRING",addIfDefault:%Boolean=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#dim add as %Boolean = addIfDefault || (v '= defaultV)
	if (add)
	{
		do a.SetAt(v, k )
	}
	quit add
]]></Implementation>
</Method>
</Class>
</Export>
