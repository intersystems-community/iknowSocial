<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="TWReader.IKnowDomain.Domain">
<Description>
This class contains code generated for the domain defined in 'TWReader.IKnowDomain'. Do not invoke methods in this class directly.</Description>
<Final>1</Final>
<ProcedureBlock>1</ProcedureBlock>
<Super>%iKnow.AbstractDomain</Super>
<TimeCreated>63648,63120.277752</TimeCreated>
<GeneratedBy>TWReader.IKnowDomain.CLS</GeneratedBy>

<Method name="%Build">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pVerbose:%Boolean=1,&pParams]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		set tSC = ..%LoadExpressions(.pParams)
		quit:$$$ISERR(tSC)

		set tDomainId = $system.iKnow.GetDomainId(..#DOMAINNAME)

		set tSC = ##class(%iKnow.Domain).%OpenId(tDomainId).DropData(0,0,1,0)
		quit:$$$ISERR(tSC)

		// %OnBeforeBuild() callback
		set tSC = ##class(TWReader.IKnowDomain).%OnBeforeBuild(tDomainId)
		quit:$$$ISERR(tSC)


		// Processing <data> element
		write:pVerbose !,$zt($p($h,",",2)),": Loading data..."
		set tSrcCount = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(tDomainId)
		set tLoader = ##class(%iKnow.Source.Loader).%New(tDomainId)

		set tLister1 = ##class(TWReader.Lister).%New(tDomainId)
		set tSC = tLister1.SetConfig("TWReaderRus")
		quit:$$$ISERR(tSC)
		set tSC = tLister1.AddListToBatch("pizza",30,1,,,,)
		quit:$$$ISERR(tSC)

		set tSC = tLoader.ProcessBatch()
		do:pVerbose ..%PrintLoadErrors(tSC,tLoader,1)
		quit:$$$ISERR(tSC)

		set tSrcCount = ##class(%iKnow.Queries.SourceAPI).GetCountByDomain(tDomainId) - tSrcCount
		write:pVerbose !,$zt($p($h,",",2)),": Finished loading ",tSrcCount," sources"
		write:pVerbose !


		// %OnAfterBuild() callback
		set tSC = ##class(TWReader.IKnowDomain).%OnAfterBuild(tDomainId)
		quit:$$$ISERR(tSC)

	} catch (ex) {
		set tSC = ex.AsStatus()
	}

	if pVerbose {
		if $$$ISERR(tSC) {
		write:pVerbose !,$zt($p($h,",",2)),": An error occurred while building domain 'TWReaderRus':"
			write:pVerbose !,$zt($p($h,",",2)),": ",$system.Status.GetErrorText(tSC)
			write !
		} else {
		write:pVerbose !,$zt($p($h,",",2)),": Successfully built domain 'TWReaderRus'"
		}
	}
		write:pVerbose !

	kill %expression
	quit tSC
]]></Implementation>
</Method>

<Method name="%CreateDictionaries">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pDropFirst:%Boolean=0,pVerbose:%Boolean=1,&pParams]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		set tSC = ..%LoadExpressions(.pParams)
		quit:$$$ISERR(tSC)

		set tDomainId = $system.iKnow.GetDomainId(..#DOMAINNAME)

		set:pDropFirst tSC = ##class(%iKnow.Matching.DictionaryAPI).DropAllDictionaryData(tDomainId)
		quit:$$$ISERR(tSC)

	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	kill %expression
	quit tSC
]]></Implementation>
</Method>

<Method name="%LoadExpressions">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pParams]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		kill %expression
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Parameter name="DOMAINNAME">
<Default>TWReaderRus</Default>
</Parameter>
</Class>
</Export>
