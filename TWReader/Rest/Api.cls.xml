<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="TWReader.Rest.Api">
<IncludeCode>TWReader.Verbose</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63619,75001.090612</TimeCreated>

<Parameter name="MaxEntityQueryCount">
<Type>%Integer</Type>
<Default>100</Default>
</Parameter>

<Parameter name="SslTlsConfig">
<Default>Twitter</Default>
</Parameter>

<Parameter name="ApiServer">
<Default>api.twitter.com</Default>
</Parameter>

<Method name="TweetsSearch">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,listparams:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    do a.SetAt($li(listparams, 1), "q")
    do a.SetAt("recent", "result_type")
    do a.SetAt($li(listparams, 2), "count")
    do:($li(listparams, 2)="") a.SetAt(15, "count")
    //do ..AddParameter(a, "since_id", sinceId)
    //do ..AddParameter(a, "until", ..DateToString(until))
    
    #dim status as %Status = ..CallApiArgs(..#ApiServer, "1.1/search/tweets.json", a, .responseData)
    if (($length(responseData) > 0) && ($extract(responseData, 1) '= "["))
    {
        set responseData = "[" _ responseData _ "]"
    }
    quit ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
]]></Implementation>
</Method>

<Method name="SplitUrl">
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String,*server:%String,*path:%String</FormalSpec>
<Implementation><![CDATA[
    if $match(url,"^https?:.*") {
        #dim http As %String = $piece(url, "://", 1)
        #dim httpRest As %String = $piece(url, "://", 2, *)
        
        set server = http _ "://" _ $piece(httpRest, "/", 1)
        set path   = "/" _ $piece(httpRest, "/", 2, *)
    }
]]></Implementation>
</Method>

<Method name="CallApiArgs">
<Description><![CDATA[
Call Twitter API given <var>api</var> urls and arguments. Return JSON data into <var>responseText</var>]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>apiServer:%String,api:%String,arrayArgs:%ArrayOfDataTypes,*responseText:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim url As %String = ""
    
    if $match(api,"^https?:.*/.*") { // Full URL given in api will override everything
        // do ..SplitUrl(api, .url, .api)
        set url = api
    } else {
        if $match(apiServer, "^https?:.*") {
            set url = apiServer
        } else {
            set url = "https://" _ apiServer
        }
        if $match(api, "^/.*") {
            set url = url _ api
        } else {
            set url = url _ "/" _ api
        }
    }
    #dim authorizer As Util.Requests.Authorizer = ##class(Util.Requests.Authorizer).%New()
    #dim authHeader as %String = authorizer.GetAuthHeader("get", url, arrayArgs)
    set responseText = ""
    quit ##class(Util.Requests.RequestSender).SendHttpRequest(apiServer, api, arrayArgs, .responseText, $$$HTTPLOGLEVEL, authHeader)
]]></Implementation>
</Method>

<Method name="GetRateLimits">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    
    #dim status as %Status = ..CallApiArgs(..#ApiServer, "1.1/application/rate_limit_status.json", a, .responseData)
    quit ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
]]></Implementation>
</Method>

<Method name="GetReverseGeocodeCity">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,lat:%Float,long:%Float</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    do a.SetAt(lat, "lat")
    do a.SetAt(long, "long")
    do a.SetAt("city", "granularity")
    
    #dim status as %Status = ..CallApiArgs(..#ApiServer, "1.1/geo/reverse_geocode.json", a, .responseData)
    quit ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
]]></Implementation>
</Method>

<Method name="GetPlaceByCoords">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,lat:%Float,long:%Float</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    do a.SetAt(lat, "lat")
    do a.SetAt(long, "long")
    
    #dim status as %Status = ..CallApiArgs(..#ApiServer, "1.1/trends/closest.json", a, .responseData)
    quit ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
]]></Implementation>
</Method>

<Method name="GetTrendsByPlace">
<ClassMethod>1</ClassMethod>
<FormalSpec>*response:%ZEN.proxyObject,id:%Integer=1,exclude:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    do a.SetAt(id, "id")
    do:(exclude'="") a.SetAt(exclude, "exclude")
    #dim responseData As %String 

    #dim status as %Status = ..CallApiArgs(..#ApiServer, "1.1/trends/place.json", a, .responseData)
    quit ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(responseData, , .response)
]]></Implementation>
</Method>

<Method name="GetTrendsByPlaceJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>*responseData:%String,id:%Integer=1,exclude:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim a as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    do a.SetAt(id, "id")
    do:(exclude'="") a.SetAt(exclude, "exclude")

    quit ..CallApiArgs(..#ApiServer, "1.1/trends/place.json", a, .responseData)
]]></Implementation>
</Method>

<Method name="DebugApiCall">
<Description><![CDATA[
Handy utility to debug Twitter API calls for any Twitter API 
<a href="https://dev.twitter.com/rest/public" target="_blank">https://dev.twitter.com/rest/public</a>
It assumes to use builtin Twitter application signature (see <class>Util.Requests.Authorizer</class>
for more details about application signature)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>apiUrl:%String="/1.1/trends/closest.json",apiParams:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim array as %ArrayOfDataTypes = ##class(%ArrayOfDataTypes).%New()
    #dim param As %String
    #dim i As %Integer
    
    if ($get(apiParams)="") {
        if $length(apiUrl, "?")>1 {
            set $lb(apiUrl, apiParams) = $lfs(apiUrl, "?")
        }
    } else {
        for i=1:1:$length(apiParams,"&") {
            set param = $piece(apiParams,"&", i)
            #dim arg As %String     = $piece(param,"=",1)
            #dim value As %String   = $piece(param,"=",*)
            do array.SetAt(value, arg)
        }
    }
    #dim jsonContent As %String
    #dim status As %Status = ..CallApiArgs(..#ApiServer, apiUrl, array, .jsonContent)
    quit:$$$ISERR(status) status

    // ok - now we have json in text, but it won't be readable much
    // let's try to parse it to object and then output in readable form
    #dim proxyObject As %ZEN.proxyObject
    set status = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(jsonContent, ,.proxyObject)
    quit:$$$ISERR(status) status
    
    // write indented (in a readable form) to the screen
    quit ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(proxyObject)
]]></Implementation>
</Method>
</Class>
</Export>
