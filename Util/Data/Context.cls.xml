<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Util.Data.Context">
<IncludeCode>%IKPublic</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63619,65391.504269</TimeCreated>

<Property name="DomainID">
<Type>%Integer</Type>
</Property>

<Property name="Domain">
<Type>%iKnow.Domain</Type>
</Property>

<Parameter name="ConfigurationName">
<Type>%String</Type>
<Default>iKnowSocialConfiguration</Default>
</Parameter>

<Parameter name="DomainName">
<Type>%String</Type>
<Default>iKnowSocialDomain</Default>
</Parameter>

<Parameter name="TitleMaxLength">
<Type>Integer</Type>
<Default>40</Default>
</Parameter>

<Method name="AddMetadataFieldIfNotExists">
<FormalSpec>fieldName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (##class(%iKnow.Queries.MetadataAPI).GetFieldId(..DomainID, fieldName) = "") {
		do ##class(%iKnow.Queries.MetadataAPI).AddField(..DomainID, fieldName, $$$MDALLOPERATORS)
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Set">
<FormalSpec>clearDomain:%Boolean=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..DomainID = ##class(%iKnow.Domain).GetOrCreateId(..#DomainName)
	set ..Domain = ##class(%iKnow.Domain).OpenId(..DomainID)
	
	set status = $$$OK
	if (clearDomain = 1) {
		set status = ..ClearDomain()
		quit:$$$ISERR(status) status
	}
	
	do ..AddMetadataFieldIfNotExists("PostLatitude")
	do ..AddMetadataFieldIfNotExists("PostLongitude")
	do ..AddMetadataFieldIfNotExists("PostDate")
	do ..AddMetadataFieldIfNotExists("PostTime")
	do ..AddMetadataFieldIfNotExists("AuthorID")
	do ..AddMetadataFieldIfNotExists("AuthorCity")
	do ..AddMetadataFieldIfNotExists("AuthorCountry")
	do ..AddMetadataFieldIfNotExists("AuthorDOB")
	do ..AddMetadataFieldIfNotExists("AuthorSex")
	do ..AddMetadataFieldIfNotExists(##class(Misc.DomainEmotionalColoringCounter).%GetParameter("EmotionalColoringField"))
		
	#dim cfg as %iKnow.Configuration
	if ##class(%iKnow.Configuration).Exists(..#ConfigurationName) {
    	set cfg = ##class(%iKnow.Configuration).Open(..#ConfigurationName) 
    }else {
		set cfg = ##class(%iKnow.Configuration).%New(..#ConfigurationName, 1, $LB("ru"))
        do cfg.%Save() 
    }
    set status = $$$ADDSC(status, ..Domain.SetParameter($$$IKPDEFAULTCONFIG, ..#ConfigurationName))
    if (clearDomain = 1) {
    	set status = $$$ADDSC(status, ..Domain.SetParameter($$$IKPSTEMMING, 1))
    }
    set status = $$$ADDSC(status, ..Domain.%Save())
    set cfg.StemmingConfig = "DEFAULT"
    set status =$$$ADDSC(status, cfg.%Save())
    quit status
]]></Implementation>
</Method>

<Method name="ClearDomain">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = ..Domain.DropData()
	quit status
]]></Implementation>
</Method>

<Method name="AddMorePosts">
<Abstract>1</Abstract>
<ReturnType>%Status</ReturnType>
</Method>

<Method name="CalculateEmotionalColoring">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = ##class(Misc.DomainEmotionalColoringCounter).CalcSourcesEmotionalColoring(..#DomainName)
	quit status
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>clearDomain:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = ..Set(clearDomain)
	quit status
]]></Implementation>
</Method>

<Method name="GetTitle">
<FormalSpec>sourceId:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	do ##class(%iKnow.Queries.SentenceAPI).GetBySource(.tSentences, ..DomainID, sourceId, 1, 1)
	set tTitle = $lg($g(tSentences(1)), 2)
	if ($length(tTitle) > ..#TitleMaxLength) {
		set tTitle = $extract(tTitle, 1, ..#TitleMaxLength) _ "..."
	}
	quit tTitle
]]></Implementation>
</Method>

<Method name="GetDate">
<FormalSpec>externalId:%String,seed:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tDate = ##class(%iKnow.Queries.MetadataAPI).GetValue(..DomainID, seed, externalId)
	if ($length(tDate) > 0) {
		quit $zdate(tDate, 1)
	}
	quit ""
]]></Implementation>
</Method>

<Method name="GetTime">
<FormalSpec>externalId:%String,seed:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tTime = ##class(%iKnow.Queries.MetadataAPI).GetValue(..DomainID, seed, externalId)
	if ($length(tTime) > 0) {
		quit $ztime(tTime, 1)
	}
	quit ""
]]></Implementation>
</Method>

<Method name="GetSex">
<FormalSpec>externalId:%String,seed:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSex = ##class(%iKnow.Queries.MetadataAPI).GetValue(..DomainID, seed, externalId)
	if (tSex = "1") {
		quit "F"
	} elseif (tSex = "2") {
		quit "M"
	}
	quit ""
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// keys are not quoted

]]></Content>
</UDLText>

<Method name="GetJSONFromArray">
<FormalSpec>contents:%ArrayOfDataTypes</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set result = "{"
	set key = ""
	for {
		set key = contents.Next(key)
		if (key = "") {
			set result = result _ "}"
			return result
		}
		set value = ##class(%CSP.Page).QuoteJS(contents.GetAt(key))
		if ($length(result) > 1) {
			set result = result _ ", " 
		}
		set result = result _  "'" _ key _ "' : " _ value 
	}
]]></Implementation>
</Method>

<Method name="GetAllPostsJSON">
<FormalSpec>shouldCountEC:%String="",pageNum:%Integer=0,pageSize:%Integer=100</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set totalResult = ""
	
	if ($length(shouldCountEC) > 0) {
		do ..CalculateEmotionalColoring()
	}
	set i=pageNum
    set:(pageNum=0) i = 1

	for {
		kill result
		do ##class(%iKnow.Queries.SourceAPI).GetByDomain(.result, ..DomainID, i, pageSize)
		if ($data(result) = 0) {
			set totalResult = "{ 'posts' : [ " _ totalResult _ " ]}"
			return totalResult
		}
		set p = ""
		for {
			set p = $order(result(p))	
			if (p '= "") {
				set tExternalId = $list(result(p), 2)
				set tSourceId = ##class(%iKnow.Queries.SourceAPI).GetSourceId(..DomainID, tExternalId)
				set tTitle = ..GetTitle(tSourceId)
				set tLatitude = ##class(%iKnow.Queries.MetadataAPI).GetValue(..DomainID, "PostLatitude", tExternalId)
				set tLongitude = ##class(%iKnow.Queries.MetadataAPI).GetValue(..DomainID, "PostLongitude", tExternalId)
				set tDate = ..GetDate(tExternalId, "PostDate")
				set tTime = ..GetTime(tExternalId, "PostTime")
				set tCity = ##class(%iKnow.Queries.MetadataAPI).GetValue(..DomainID, "AuthorCity", tExternalId)
				set tCountry = ##class(%iKnow.Queries.MetadataAPI).GetValue(..DomainID, "AuthorCountry", tExternalId)
				set tDOB = ..GetDate(tExternalId, "AuthorDOB")
				set tSex = ..GetSex(tExternalId, "AuthorSex")
				set tId = ##class(%iKnow.Queries.MetadataAPI).GetValue(..DomainID, "AuthorID", tExternalId)
				set tEC = ##class(%iKnow.Queries.MetadataAPI).GetValue(..DomainID, ##class(Misc.DomainEmotionalColoringCounter).#EmotionalColoringField, tExternalId)
				set tRow = ##class(%ArrayOfDataTypes).%New()
				set tQuery = $piece($piece(tExternalId,":::",1),":",3)
				do tRow.SetAt(tSourceId ,"sourceId")
				do tRow.SetAt(tTitle ,"title")
				do tRow.SetAt(tLatitude ,"latitude")
				do tRow.SetAt(tLongitude ,"longitude")
				do tRow.SetAt(tDate ,"date")
				do tRow.SetAt(tTime ,"time")
				do tRow.SetAt(tCity, "city")
				do tRow.SetAt(tCountry ,"country")
				do tRow.SetAt(tDOB ,"bdate")
				do tRow.SetAt(tSex ,"sex")
				do tRow.SetAt(tId, "id")
				do tRow.SetAt(tEC, "EC")
				do tRow.SetAt(tQuery, "query")
				
				set postJSON = ..GetJSONFromArray(tRow)
				if ($length(totalResult) > 0) {
					set totalResult = totalResult _ ", "
				}
				set totalResult = totalResult _ postJSON
			} else {
				quit
			}
		}
		return:(pageNum'=0) "{ 'posts' : [ " _ totalResult _ " ]}"
		set i = i + 1
	}
]]></Implementation>
</Method>
</Class>
</Export>
