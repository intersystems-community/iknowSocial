<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="VKReader.Utils">
<Abstract>1</Abstract>
<TimeCreated>63477,49032.059763</TimeCreated>

<Method name="ConvertVKDateToHorolog">
<Description>
Convert date in d[d].m[m].yyyy format to horolog.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>VKDate:%String</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	#dim date As %Date = ""
	if ($length(VKDate, ".") = 3) {
		if ($length($piece(VKDate, ".", 1)) = 1) {
			set VKDate = "0" _ VKDate
		}
		if ($length($piece(VKDate, ".", 2)) = 1) {
			set VKDate = $piece(VKDate, ".", 1) _ ".0" _ $piece(VKDate, ".", 2, 3)
		}
		set date = $zdateh($replace(VKDate, ".", "/"), 4)
	}
	quit date
]]></Implementation>
</Method>

<Method name="ConvertUnixTimeToHorolog">
<ClassMethod>1</ClassMethod>
<FormalSpec>unixTime:%Integer,*date:%Integer,*time:%Numeric</FormalSpec>
<Implementation><![CDATA[
	set date = $normalize(unixTime / 86400, -1) + 47117	// get integer days part and adjust to Cache time
	set time = unixTime - ..ConvertHorologToUnixTime(date, 0)	// get remaining time in day in seconds
]]></Implementation>
</Method>

<Method name="ConvertHorologToUnixTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>date:%Integer,time:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	quit (date - 47117) * 86400 + time
]]></Implementation>
</Method>

<Method name="UrlEncode">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Convert from Unicode to UTF-8 as explicit character sequences:
	set text = $zconvert(text, "O", "UTF8")
	// Encode using URL encoding:
	set text = $zconvert(text, "O", "URL")
	// Because $zconvert("URL") doesn't encode "/" characters, we do it by replacing "/" by "%2F".
	quit text
]]></Implementation>
</Method>

<Method name="IsInteger">
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ($isvalidnum(str) && (str # 1 = 0))
]]></Implementation>
</Method>

<Method name="RunAllTests">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(VKReader.Requests.Tests.RequestMakerTests).Run()
	do ##class(VKReader.Requests.Tests.APIPublicMethodsCallerTests).Run()
	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
